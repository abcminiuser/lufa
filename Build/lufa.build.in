#
#             LUFA Library
#     Copyright (C) Dean Camera, 2012.
#
#  dean [at] fourwalledcubicle [dot] com
#           www.lufa-lib.org
#

LUFA_BUILD_MODULES += BUILD
LUFA_BUILD_TARGETS += all build size checksource

# -----------------------------------------------------------------------------
#               LUFA Compiler Buildsystem Makefile Module.
# -----------------------------------------------------------------------------
# DESCRIPTION:
#   Provides a set of targets to build a C, C++ and/or Assembly application
#   via the AVR-GCC compiler.
# -----------------------------------------------------------------------------
# TARGETS:
#
#    all                       - Build application and list size
#    build                     - Build application
#    size                      - List application size
#    checksource               - Check existance of listed input source files
#
# MANDATORY PARAMETERS:
#
#    TARGET                    - Application name
#    ARCH                      - Device architecture name
#    MCU                       - Microcontroller device model name
#    SRC                       - List of input source files (.c, .cpp/.c++, .S)
#
# OPTIONAL PARAMETERS:
#
#    BOARD                     - LUFA board hardware
#    OPTIMIZATION              - Optimization level
#
# -----------------------------------------------------------------------------

# Output Messages
MSG_BUILD_BEGIN = Begin compilation of project \"$(TARGET)\"...
MSG_BUILD_END   = Finished building project \"$(TARGET)\"...
MSG_COMPILE_CMD = '  [CC]      :'
MSG_LINKER_CMD  = '  [LNK]     :'
MSG_SIZE_CMD    = '  [SIZE]    :'

# Sanity check the user MCU, TARGET, ARCH and SRC makefile options
ifeq ($(TARGET),)
   $(error Makefile TARGET value not set.)
endif
ifeq ($(ARCH),)
   $(error Makefile ARCH value not set.)
endif
ifeq ($(MCU),)
   $(error Makefile MCU value not set.)
endif
ifeq ($(SRC),)
   $(error Makefile SRC value not set.)
endif

# Default values of user-supplied variables
BOARD         ?= NONE
OPTIMIZATION  ?= 0

# Convert input source file list to differentiate them by type
C_SOURCE   = $(filter %.c, $(SRC))
CPP_SOURCE = $(filter %.cpp, $(SRC)) $(filter %.c++, $(SRC))
ASM_SOURCE = $(filter %.S, $(SRC))

# Create a list of unknown source file types, if any are found throw an error
UNKNOWN_SOURCE = $(filter-out $(C_SOURCE) $(CPP_SOURCE) $(ASM_SOURCE), $(SRC))
ifneq ($(UNKNOWN_SOURCE),)
   $(error Unknown source formats: $(UNKNOWN_SOURCE))
endif

# Determine flags to pass to the size utility based on its reported features
SIZE_MCU_FLAG    = $(shell avr-size --help | grep -- --mcu > /dev/null && echo --mcu=$(MCU) )
SIZE_FORMAT_FLAG = $(shell avr-size --help | grep -- --format=.*avr > /dev/null && echo --format=avr )


begin:
	@echo $(MSG_BUILD_BEGIN)
	
end:
	@echo $(MSG_BUILD_END)

all: begin build end

checksource:
	@for f in $(SRC) $(CPPSRC) $(ASRC); do \
		if [ -f $$f ]; then \
			echo "Found Source File: $$f" ; \
		else \
			echo "Source File Not Found: $$f" ; \
		fi; \
	 done

build:

size:
	@echo $(MSG_SIZE_CMD) Determining size of \"$(TARGET).elf\"
	@if test -f $(TARGET).elf; then \
	    avr-size $(SIZE_MCU_FLAG) $(SIZE_FORMAT_FLAG) $(TARGET).elf ; 2>/dev/null; \
	 fi
